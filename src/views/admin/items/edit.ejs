<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Edit Item</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .grid-pattern {
      background-image: 
        linear-gradient(45deg, rgba(255,255,255,0.1) 25%, transparent 25%, transparent 75%, rgba(255,255,255,0.1) 75%),
        linear-gradient(45deg, rgba(255,255,255,0.1) 25%, transparent 25%, transparent 75%, rgba(255,255,255,0.1) 75%);
      background-size: 20px 20px;
      background-position: 0 0, 10px 10px;
    }
    body { background: #f5f0eb; }
    .bg-beige-light { background: #e8ddd4; }
    .bg-form-bg { background: #f5f0eb; }
    input, select, textarea { background: #e8ddd4 !important; }
    button, .rounded-full { background: #DED9CE; color: #6C6154; }
    button:hover, .rounded-full:hover { background: #6C6154; color: #DED9CE; }
  </style>
</head>
<body class="font-sans bg-gray-100 h-screen overflow-hidden">
  <%- include('../../partials/admin/sidebar') %>
  <div class="ml-64 flex h-screen">
    <div class="flex-1 flex flex-col">
      <!-- Header -->
      <div class="bg-form-bg h-16 flex items-center justify-end px-6 border-b">
        <div class="flex items-center gap-4">
          <div class="w-10 h-10 bg-beige rounded-full flex items-center justify-center cursor-pointer">ðŸ””</div>
          <div class="flex items-center gap-2 cursor-pointer">
            <span class="text-sm text-gray-700">Admin</span>
            <div class="w-10 h-10 bg-beige rounded-full flex items-center justify-center">ðŸ‘¤</div>
          </div>
        </div>
      </div>
      <!-- Edit Content -->
      <div class="flex-1 bg-form-bg grid-pattern p-8 overflow-auto">
        <div class="max-w-4xl mx-auto bg-white rounded-lg shadow p-8">
          <h1 class="text-2xl font-bold mb-6">Edit Item</h1>
          <div class="mb-6 flex flex-wrap items-center gap-3 font-semibold text-[#72675e]">
            <label for="item-selector">Pilih item untuk diedit</label>
            <select id="item-selector" name="itemSelect" class="bg-[#e1d6c4] rounded-lg px-3 py-2 min-w-[220px] font-semibold text-[#705e4c] focus:outline-[#6d5c4a] focus:bg-[#d4c1a9] focus:text-[#4c4231]">
              <option value="">-- Pilih alat atau jasa --</option>
              <% if (typeof items !== 'undefined' && items.length > 0) { %>
                <% items.forEach(item => { %>
                  <option value="<%= item.id %>" data-type="<%= item.type %>"><%= item.name %> (<%= item.type %>)</option>
                <% }) %>
              <% } %>
            </select>
          </div>
          <form id="edit-form" method="POST" enctype="multipart/form-data" class="grid grid-cols-2 gap-8" autocomplete="off">
            <!-- Hidden field to ensure type is always sent -->
            <input type="hidden" name="type" id="hidden-type" value="">
            
            <!-- Left Column -->
            <div class="space-y-6">
              <div>
                <label class="block text-gray-600 text-sm mb-2">Tipe <span class="text-red-500">*</span></label>
                <div class="relative">
                  <select id="type" class="w-full px-4 py-3 bg-beige-light border-0 rounded focus:outline-none focus:ring-2 focus:ring-sidebar-green appearance-none" disabled>
                    <option value="">Pilih Tipe</option>
                    <option value="item">Item</option>
                    <option value="service">Service</option>
                  </select>
                  <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                    <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </div>
                </div>
              </div>
              <div>
                <label class="block text-gray-600 text-sm mb-2">Kategori <span class="text-red-500">*</span></label>
                <div class="relative">
                  <select id="category" name="category" class="w-full px-4 py-3 bg-beige-light border-0 rounded focus:outline-none focus:ring-2 focus:ring-sidebar-green appearance-none">
                    <option value="">Pilih Kategori</option>
                  </select>
                  <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                    <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </div>
                </div>
              </div>
              <div>
                <label class="block text-gray-600 text-sm mb-2">Nama <span class="text-red-500">*</span></label>
                <input name="name" id="name" type="text" placeholder="Masukkan nama alat atau jasa" class="w-full px-4 py-3 bg-beige-light border-0 rounded focus:outline-none focus:ring-2 focus:ring-sidebar-green">
              </div>
              <div>
                <label class="block text-gray-600 text-sm mb-2">Deskripsi</label>
                <textarea name="description" id="description" rows="4" placeholder="Deskripsi singkat" class="w-full px-4 py-3 bg-beige-light border-0 rounded focus:outline-none focus:ring-2 focus:ring-sidebar-green resize-none"></textarea>
              </div>
            </div>
            <!-- Right Column -->
            <div class="space-y-6">
              <div>
                <label class="block text-gray-600 text-sm mb-2">Status <span class="text-red-500">*</span></label>
                <div class="relative">
                  <select name="status" id="status" class="w-full px-4 py-3 bg-beige-light border-0 rounded focus:outline-none focus:ring-2 focus:ring-sidebar-green appearance-none">
                    <option value="">Pilih Status</option>
                  </select>
                  <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                    <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </div>
                </div>
              </div>
              <div id="quantity-field">
                <label class="block text-gray-600 text-sm mb-2">Jumlah <span class="text-red-500">*</span></label>
                <input name="quantity" id="quantity" type="number" placeholder="Masukkan jumlah" class="w-full px-4 py-3 bg-beige-light border-0 rounded focus:outline-none focus:ring-2 focus:ring-sidebar-green">
              </div>
              <div class="mb-4" id="price-field">
                <label for="price" class="block text-sm font-medium text-gray-700">Harga</label>
                <input type="number" name="price" id="price" step="any" class="mt-1 p-2 w-full border rounded-md bg-beige-light" placeholder="Masukkan harga">
              </div>
              <div>
                <label class="block text-gray-600 text-sm mb-2">Foto</label>
                <div class="relative">
                  <input name="photo" type="file" id="file-upload" class="absolute inset-0 w-full h-full opacity-0 cursor-pointer">
                  <div class="w-full px-4 py-3 bg-beige-light rounded flex items-center justify-between">
                    <span class="text-gray-500 text-sm">Pilih file</span>
                    <button type="button" class="text-xs bg-white px-3 py-1 rounded border">Pilih file</button>
                  </div>
                </div>
                <div id="image-preview-container" class="mt-2" style="display: none;">
                  <p class="text-xs text-gray-500 mb-1">Foto saat ini:</p>
                  <img id="image-preview" src="" alt="Preview Foto Item" class="max-w-xs max-h-32 rounded-lg border shadow-sm">
                  <div id="image-placeholder" class="max-w-xs max-h-32 bg-gray-200 rounded-lg border shadow-sm flex items-center justify-center" style="display: none;">
                    <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                    </svg>
                  </div>
                </div>
              </div>
            </div>
            <!-- Submit Button -->
            <div class="col-span-2 flex justify-center mt-8">
              <button type="submit" id="simpan-button" class="px-8 py-3 bg-white border-2 border-gray-800 text-gray-800 rounded-full hover:bg-gray-50 transition-colors" disabled>
                Simpan
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  <script>
    // Make items data available globally
    const items = JSON.parse('<%- JSON.stringify(items || []) %>');
    
    document.addEventListener('DOMContentLoaded', () => {
      const itemSelector = document.getElementById('item-selector');
      const editForm = document.getElementById('edit-form');
      const simpanButton = document.getElementById('simpan-button');
      const nameInput = document.getElementById('name');
      const statusSelect = document.getElementById('status');
      const categorySelect = document.getElementById('category');
      const typeSelect = document.getElementById('type');
      const quantityInput = document.getElementById('quantity');
      const quantityField = document.getElementById('quantity-field');
      const descriptionInput = document.getElementById('description');
      const priceInput = document.getElementById('price');
      const priceField = document.getElementById('price-field');
      const imagePreviewContainer = document.getElementById('image-preview-container');
      const imagePreview = document.getElementById('image-preview');
      const imagePlaceholder = document.getElementById('image-placeholder');
      const hiddenTypeInput = document.getElementById('hidden-type');

      // Category options for different types
      const itemCategories = [
        'elektronik',
        'peralatan kantor', 
        'peralatan olahraga',
        'laboratorium',
        'audio visual'
      ];

      const serviceCategories = [
        'fotografi',
        'desain grafis',
        'teknologi',
        'konsultasi',
        'maintenance',
        'animasi dan motion grafis',
        'multimedia interaktif'
      ];

      // Status options for different types
      const itemStatuses = [
        { value: 'available', label: 'Available' },
        { value: 'maintenance', label: 'Maintenance' },
        { value: 'damaged', label: 'Damaged' },
        { value: 'lost', label: 'Lost' }
      ];

      const serviceStatuses = [
        { value: 'available', label: 'Available' },
        { value: 'unavailable', label: 'Unavailable' },
        { value: 'maintenance', label: 'Maintenance' }
      ];

      function normalizeCategory(category) {
        if (!category) return '';
        return category.toLowerCase().trim();
      }

      function findMatchingCategory(categoryValue, availableCategories) {
        if (!categoryValue) return '';
        
        const normalizedValue = normalizeCategory(categoryValue);
        console.log('Looking for category:', normalizedValue);
        
        // Coba exact match dulu
        let match = availableCategories.find(cat => normalizeCategory(cat) === normalizedValue);
        
        if (match) {
          console.log('Exact match found:', match);
          return match;
        }
        
        // Jika tidak ada exact match, coba partial match
        match = availableCategories.find(cat => 
          normalizeCategory(cat).includes(normalizedValue) || 
          normalizedValue.includes(normalizeCategory(cat))
        );
        
        if (match) {
          console.log('Partial match found:', match);
          return match;
        }
        
        // Jika masih tidak ada, kembalikan nilai asli
        console.log('No match found, returning original:', categoryValue);
        return categoryValue;
      }

      function updateCategoryOptions() {
        const selectedType = typeSelect.value;
        categorySelect.innerHTML = '<option value="">Pilih Kategori</option>';
        
        if (selectedType === 'item') {
          itemCategories.forEach(category => {
            const option = document.createElement('option');
            option.value = category;
            option.textContent = category.charAt(0).toUpperCase() + category.slice(1);
            categorySelect.appendChild(option);
          });
        } else if (selectedType === 'service') {
          serviceCategories.forEach(category => {
            const option = document.createElement('option');
            option.value = category;
            option.textContent = category.charAt(0).toUpperCase() + category.slice(1);
            categorySelect.appendChild(option);
          });
        }
      }

      function updateStatusOptions() {
        const selectedType = typeSelect.value;
        statusSelect.innerHTML = '<option value="">Pilih Status</option>';
        
        if (selectedType === 'item') {
          itemStatuses.forEach(status => {
            const option = document.createElement('option');
            option.value = status.value;
            option.textContent = status.label;
            statusSelect.appendChild(option);
          });
        } else if (selectedType === 'service') {
          serviceStatuses.forEach(status => {
            const option = document.createElement('option');
            option.value = status.value;
            option.textContent = status.label;
            statusSelect.appendChild(option);
          });
        }
      }

      function toggleFields() {
        const selectedType = typeSelect.value;
        
        if (selectedType === 'item') {
          quantityField.style.display = 'block';
          priceField.style.display = 'none';
          // Clear price field when hidden to prevent validation issues
          priceInput.value = '';
        } else if (selectedType === 'service') {
          quantityField.style.display = 'none';
          priceField.style.display = 'block';
          // Clear quantity field when hidden to prevent validation issues
          quantityInput.value = '';
        } else {
          quantityField.style.display = 'block';
          priceField.style.display = 'block';
        }
      }

      typeSelect.addEventListener('change', () => {
        updateCategoryOptions();
        updateStatusOptions();
        toggleFields();
        categorySelect.value = '';
        statusSelect.value = '';
        hiddenTypeInput.value = typeSelect.value;
      });

      function resetForm() {
        editForm.reset();
        editForm.action = '';
        simpanButton.disabled = true;
        imagePreviewContainer.style.display = 'none';
        
        updateCategoryOptions();
        updateStatusOptions();
        toggleFields();
      }

      itemSelector.addEventListener('change', async (event) => {
        const selectedId = event.target.value;
        if (!selectedId) {
          resetForm();
          return;
        }
        try {
          // Get type from selected option's data-type attribute
          const selectedOption = itemSelector.options[itemSelector.selectedIndex];
          const itemType = selectedOption.getAttribute('data-type');
          
          if (!itemType) {
            throw new Error('Tipe item tidak ditemukan');
          }
          
          const response = await fetch(`/admin/api/items/${selectedId}?type=${itemType}`);
          if (!response.ok) throw new Error(`Gagal mengambil data. Status: ${response.status}`);
          const itemData = await response.json();
          
          console.log('Received item data:', itemData); // Debug log
          console.log('Item type:', itemType); // Debug log
          console.log('Original category from API:', itemData.category); // Debug log
          
          // Set type based on the selected item
          typeSelect.value = itemType;
          hiddenTypeInput.value = itemType;
          
          // Update dropdowns first
          updateCategoryOptions();
          updateStatusOptions();
          toggleFields();
          
          // Wait a bit for DOM to update, then set values
          setTimeout(() => {
            nameInput.value = itemData.name || '';
            statusSelect.value = itemData.status || '';
            
            // Handle category with normalization
            const availableCategories = itemType === 'item' ? itemCategories : serviceCategories;
            const matchedCategory = findMatchingCategory(itemData.category, availableCategories);
            
            // Set category value
            if (matchedCategory) {
              categorySelect.value = matchedCategory;
              console.log('Category set to:', matchedCategory);
            } else {
              // Jika kategori tidak ada di daftar, tambahkan sebagai opsi baru
              const newOption = document.createElement('option');
              newOption.value = itemData.category;
              newOption.textContent = itemData.category;
              categorySelect.appendChild(newOption);
              categorySelect.value = itemData.category;
              console.log('Added new category option:', itemData.category);
            }
            
            quantityInput.value = itemData.quantity || 0;
            descriptionInput.value = itemData.description || '';
            priceInput.value = itemData.price || '';
            
            // Clear hidden fields to prevent validation issues
            if (itemType === 'service') {
              quantityInput.value = '';
            } else {
              priceInput.value = '';
            }
            
            console.log('Setting category to:', itemData.category); // Debug log
            console.log('Matched category:', matchedCategory); // Debug log
            console.log('Available category options:', Array.from(categorySelect.options).map(opt => opt.value)); // Debug log
            console.log('Final category value:', categorySelect.value); // Debug log
            
            if (itemData.photo) {
              imagePreview.src = `/uploads/${itemData.photo}`;
              imagePreview.onerror = function() {
                this.style.display = 'none';
                imagePlaceholder.style.display = 'flex';
              };
              imagePreviewContainer.style.display = 'block';
            } else {
              imagePreviewContainer.style.display = 'none';
            }
            editForm.action = `/admin/items/edit/${itemData.id}`;
            simpanButton.disabled = false;
          }, 100);
          
        } catch (err) {
          console.error('Error:', err);
          alert('Gagal mengambil data item: ' + err.message);
          resetForm();
        }
      });
      // Disable submit jika belum pilih item
      editForm.addEventListener('submit', function(e) {
        console.log('=== FORM SUBMIT EVENT TRIGGERED ===');
        
        if (!itemSelector.value) {
          e.preventDefault();
          alert('Pilih item yang ingin diedit terlebih dahulu!');
          return;
        }
        
        // Validasi field yang required
        const name = nameInput.value.trim();
        const category = categorySelect.value;
        const status = statusSelect.value;
        
        console.log('Validation check:');
        console.log('- Name:', name);
        console.log('- Category:', category);
        console.log('- Status:', status);
        
        if (!name) {
          e.preventDefault();
          alert('Nama tidak boleh kosong!');
          nameInput.focus();
          return;
        }
        
        if (!category) {
          e.preventDefault();
          alert('Kategori harus dipilih!');
          categorySelect.focus();
          return;
        }
        
        if (!status) {
          e.preventDefault();
          alert('Status harus dipilih!');
          statusSelect.focus();
          return;
        }
        
        // Validasi berdasarkan tipe
        const selectedOption = itemSelector.options[itemSelector.selectedIndex];
        const itemType = selectedOption.getAttribute('data-type');
        
        console.log('Item type:', itemType);
        
        if (itemType === 'service') {
          const price = priceInput.value;
          console.log('Service price:', price);
          if (!price || parseFloat(price) <= 0) {
            e.preventDefault();
            alert('Harga harus diisi dengan nilai yang lebih dari 0!');
            priceInput.focus();
            return;
          }
        } else {
          const quantity = quantityInput.value;
          console.log('Item quantity:', quantity);
          if (!quantity || parseInt(quantity) <= 0) {
            e.preventDefault();
            alert('Jumlah harus diisi dengan nilai yang lebih dari 0!');
            quantityInput.focus();
            return;
          }
        }
        
        // Log form data before submit
        const formData = new FormData(editForm);
        console.log('=== FORM DATA BEING SENT ===');
        console.log('Form action:', editForm.action);
        console.log('Form method:', editForm.method);
        for (let [key, value] of formData.entries()) {
          console.log(key + ':', value);
        }
        
        // Pastikan type tersimpan dengan benar
        hiddenTypeInput.value = itemType;
        
        console.log('Final type value:', hiddenTypeInput.value);
        console.log('Form will be submitted to:', editForm.action);
        console.log('=== FORM SUBMISSION ALLOWED ===');
        
        // Form akan dikirim secara normal - tidak ada preventDefault()
      });

      // Notifikasi sukses setelah update
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.get('update') === 'success') {
        const popup = document.createElement('div');
        popup.id = 'success-popup';
        popup.className = 'fixed top-5 right-5 bg-green-500 text-white px-4 py-2 rounded shadow-lg z-50';
        popup.textContent = 'Item berhasil diubah!';
        document.body.appendChild(popup);
        setTimeout(() => popup.remove(), 3000);
      }
    });
  </script>
</body>
</html>